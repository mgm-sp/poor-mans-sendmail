#!/usr/bin/env ruby
require "pp"
require "optparse"
require 'socket'

$servername = Socket.gethostname
$dry_run = false
$port = 25
optpars = OptionParser.new { |opts|
	YELLOW="\033[33m"
	NORMAL="\033[0m"
	opts.banner  = <<~USAGE
		Usage: #{File.basename($0)} [options] <server> [<mail_from> [<rcpt_to> [mailfile]]]
		Ex.:
		#{YELLOW}1. Check if Mail works (+IP reverse lookup, + IP Blacklist)#{NORMAL}
		   #{File.basename($0)} <server> someone@#{$servername} someone@server valid.eml
		#{YELLOW}2. Check for open relay#{NORMAL}
		   #{File.basename($0)} <server> someone@#{$servername} benjamin.kellermann@mgm-sp.com valid.eml
		#{YELLOW}3. Check if spf is configured correctly:#{NORMAL}
		   #{File.basename($0)} <server> someone@ile-d-if.mgm-sp.team someone@server valid.eml
		#{YELLOW}4. Check if From-Address can be bullshit#{NORMAL}
		   #{File.basename($0)} <server> someone@#{$servername} someone@server invalid-from.eml
		#{YELLOW}5. Check if DMARC is checked#{NORMAL}
		   #{File.basename($0)} <server> someone@#{$servername} someone@server dmarc-reject.eml
		#{YELLOW}6. Check if DKIM is checked#{NORMAL}
		   #{File.basename($0)} <server> someone@#{$servername} someone@server dkim-reject.eml
		#{YELLOW}7. Check if receipient has a virus scanner in place#{NORMAL}
		   #{File.basename($0)} <server> someone@#{$servername} someone@server eicar.eml
	USAGE
	opts.separator "Options:"

	opts.on('--helo <servername>', "Use <servername> in HELO instead of #{$servername}") {|string|
		$servername = string
	}

	opts.on('--port <port>', "Use <port> instead of #{$port}") {|integer|
		$port = integer.to_i
	}

	opts.on('--dry-run', "do not execute commands") {|bool|
		$dry_run = bool
	}

	opts.on("-h", "--help", "show this message") {
		puts opts
		exit
	}
}

begin
	optpars.parse!
rescue => e
	puts optpars
	raise e
end

class DummyTCPSocket
	def DummyTCPSocket::open(server, port)
		puts "openssl s_client -starttls smtp -servername #{server} -connect #{server}:#{port} -crlf -quiet"
		DummyTCPSocket.new
	end
	def gets
		"250 DRY-RUN-OK"
	end
	def puts s
	end
	def close
	end
end
class SMTP
	def initialize(server)
		@server = server
		if $dry_run
			@s = DummyTCPSocket.open(@server, $port)
		else
			@s = TCPSocket.open(@server, $port)
		end
		puts "$ nc #{@server} #{$port}"
		banner = @s.gets
		puts banner
		if banner.scan(/^(\d\d\d)(.*)$/).flatten[0].to_i >=300
			exit
		end
		if send_wait("HELO #{$servername}")[0] != 250
			exit
		end
	end

	def send_wait(cmd)
		send(cmd)
		result = @s.gets
		puts result
		ret = result.scan(/^(\d\d\d)(.*)$/).flatten
		ret[0] = ret[0].to_i
		ret
	end
	def send(cmd)
		puts cmd
		@s.puts("#{cmd}\r\n")
	end
	def close
		@s.close
	end
	def renew
		@s.close
		initialize(@server)
	end
end

if ARGV[0]
	server = ARGV[0]
else
	puts optpars
	exit
end
s = SMTP.new(server)


replace = {
	"DATE" => Time.now.strftime("%a, %d %b %Y %T %z")
}
exit unless ARGV[1]
replace["FROM"] = ARGV[1]
exit if (s.send_wait("MAIL FROM: <#{ARGV[1]}>")[0] >= 400)
exit unless ARGV[2]
replace["TO"] = ARGV[2]
exit if (s.send_wait("RCPT TO: <#{ARGV[2]}>")[0] >=400)
exit unless ARGV[3]
exit if (s.send_wait("DATA")[0] >=400)
File.open(ARGV[3]).each{|line|
	replace.keys.each{|k|
		line.gsub!("INSERT-#{k}-VARIABLE",replace[k])
	}
	s.send(line.chomp)
}
s.send_wait(".")
s.send_wait("QUIT")
s.close
